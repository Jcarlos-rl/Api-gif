{"version":3,"sources":["components/AddCategory/AddCategory.js","helpers/getGifs.js","components/GifGridItem/GifGridItem.js","components/GifGrid/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","res","json","data","gifs","map","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","img","GifExpertApp","categories","categorie","index","ReactDOM","render","document","getElementById"],"mappings":"wQAIe,SAASA,EAAT,GAAuC,IAAjBC,EAAgB,EAAhBA,cAAgB,EAEbC,mBAAS,IAFI,mBAE1CC,EAF0C,KAE9BC,EAF8B,KAiBjD,OACI,mCACI,sBAAMC,SAXO,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACtCN,EAAc,MAMd,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAnBU,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,c,mCCTlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEDI,MAAMF,GAFL,cAEbG,EAFa,gBAGEA,EAAIC,OAHN,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,YAGlB,MAAO,CACHC,GAJmC,EAAnBA,GAKhBC,MALmC,EAAhBA,MAMnBT,IANmC,EAAVU,OACtBC,iBACoBX,QAPZ,kBAeZM,GAfY,4CAAH,sD,MCGL,SAASM,EAAT,GAAmC,IAAbH,EAAY,EAAZA,MAAMT,EAAM,EAANA,IACvC,OACI,sBAAKa,UAAU,yCAAf,UACI,qBAAKC,IAAKd,EAAKe,IAAKN,IACpB,4BAAIA,O,MCFD,SAASO,EAAT,GAA8B,IAAZlB,EAAW,EAAXA,SAAW,ECFhB,SAACA,GAAY,IAAD,EACVd,mBAAS,CAC/BqB,KAAM,GACNY,SAAS,IAHuB,mBAC7BC,EAD6B,KACtBC,EADsB,KAepC,OATAC,qBAAU,WACNvB,EAAQC,GAAUuB,MAAK,SAAAC,GACnBH,EAAS,CACLd,KAAMiB,EACNL,SAAS,SAGnB,CAAEnB,IAEGoB,EDXgBK,CAAazB,GAA7BO,EAFiC,EAEjCA,KAAKY,EAF4B,EAE5BA,QAEZ,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDf,IAClDmB,GAAW,2CACZ,qBAAKJ,UAAU,YAAf,SAEQR,EAAKE,KAAI,SAAAiB,GAAG,OACR,cAAC,EAAD,eAA8BA,GAAZA,EAAIhB,YEZ/B,SAASiB,IAAgB,IAAD,EAECzC,mBAAS,CAAC,gBAFX,mBAE5B0C,EAF4B,KAEhB3C,EAFgB,KAInC,OACI,gCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ2C,EAAWnB,KAAI,SAACoB,EAAUC,GAAX,OACX,cAAC,EAAD,CAAqB9B,SAAU6B,GAAjBC,W,MCXtCC,IAASC,OACP,cAACL,EAAD,IACAM,SAASC,eAAe,W","file":"static/js/main.80b4e704.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './AddCategory.css';\n\nexport default function AddCategory({setCategories}) {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e)=>{\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e)=>{\n        e.preventDefault();\n\n        if(inputValue.trim().length > 2){\n            setCategories( cats => [inputValue,...cats]);\n            setInputValue('');\n        }\n    }\n\n    return (\n        <>\n            <form onSubmit={handleSubmit}>\n                <input\n                    type=\"text\"\n                    value={inputValue}\n                    onChange={handleInputChange}\n                />\n            </form>\n        </>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\n\n","export const getGifs = async(category)=>{\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=GDOmQn1SZURK242JuZ1Z50FqCerWHYDw`;\n    const res = await fetch(url);\n    const {data} = await res.json();\n\n    const gifs = data.map(({id,title,images})=>{\n        const {downsized_medium} = images,\n            url = downsized_medium.url;\n        return {\n            id,\n            title,\n            url\n        }\n    });\n\n    return gifs;\n}","import React from 'react';\nimport './GifGridItem.css';\n\nexport default function GifGridItem({title,url}) {\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title}/>\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react';\nimport { useFetchGifs } from '../../hooks/useFetchGifs';\nimport GifGridItem from '../GifGridItem';\nimport './GifGrid.css';\n\nexport default function GifGrid({category}) {\n\n    const {data,loading} = useFetchGifs(category);\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n            {loading && <p>Loading...</p>}\n            <div className=\"card-grid\">\n                {\n                    data.map(img=>(\n                        <GifGridItem key={img.id} {...img}/>\n                    ))\n                }\n            </div>\n        </>\n    )\n}\n\n\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from '../helpers/getGifs'\n\nexport const useFetchGifs = (category)=>{\n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(()=>{\n        getGifs(category).then(imgs=>{\n            setstate({\n                data: imgs,\n                loading: false\n            })\n        })\n    },[ category ]);\n\n    return state;\n}","import React, {useState} from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nexport default function GifExpertApp() {\n\n    const [categories, setCategories] = useState(['Dragon Ball'])\n\n    return (\n        <div>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories}/>\n            <hr/>\n\n            <ol>\n                {\n                    categories.map((categorie,index)=>(\n                        <GifGrid key={index} category={categorie}/>\n                    ))\n                }\n            </ol>\n        </div>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <GifExpertApp/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}